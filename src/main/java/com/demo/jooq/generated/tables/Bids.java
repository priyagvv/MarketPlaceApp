/*
 * This file is generated by jOOQ.
 */
package com.demo.jooq.generated.tables;


import com.demo.jooq.generated.Indexes;
import com.demo.jooq.generated.Keys;
import com.demo.jooq.generated.Test;
import com.demo.jooq.generated.tables.records.BidsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bids extends TableImpl<BidsRecord> {

    private static final long serialVersionUID = -1462931080;

    /**
     * The reference instance of <code>test.BIDS</code>
     */
    public static final Bids BIDS = new Bids();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BidsRecord> getRecordType() {
        return BidsRecord.class;
    }

    /**
     * The column <code>test.BIDS.id</code>.
     */
    public final TableField<BidsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>test.BIDS.project_id</code>.
     */
    public final TableField<BidsRecord, Integer> PROJECT_ID = createField(DSL.name("project_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>test.BIDS.username</code>.
     */
    public final TableField<BidsRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>test.BIDS.bid_price</code>.
     */
    public final TableField<BidsRecord, Double> BID_PRICE = createField(DSL.name("bid_price"), org.jooq.impl.SQLDataType.FLOAT, this, "");

    /**
     * The column <code>test.BIDS.auto_bid</code>.
     */
    public final TableField<BidsRecord, Byte> AUTO_BID = createField(DSL.name("auto_bid"), org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * Create a <code>test.BIDS</code> table reference
     */
    public Bids() {
        this(DSL.name("BIDS"), null);
    }

    /**
     * Create an aliased <code>test.BIDS</code> table reference
     */
    public Bids(String alias) {
        this(DSL.name(alias), BIDS);
    }

    /**
     * Create an aliased <code>test.BIDS</code> table reference
     */
    public Bids(Name alias) {
        this(alias, BIDS);
    }

    private Bids(Name alias, Table<BidsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bids(Name alias, Table<BidsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Bids(Table<O> child, ForeignKey<O, BidsRecord> key) {
        super(child, key, BIDS);
    }

    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BIDS_PRIMARY, Indexes.BIDS_PROJECT_ID);
    }

    @Override
    public Identity<BidsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BIDS;
    }

    @Override
    public UniqueKey<BidsRecord> getPrimaryKey() {
        return Keys.KEY_BIDS_PRIMARY;
    }

    @Override
    public List<UniqueKey<BidsRecord>> getKeys() {
        return Arrays.<UniqueKey<BidsRecord>>asList(Keys.KEY_BIDS_PRIMARY);
    }

    @Override
    public Bids as(String alias) {
        return new Bids(DSL.name(alias), this);
    }

    @Override
    public Bids as(Name alias) {
        return new Bids(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bids rename(String name) {
        return new Bids(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bids rename(Name name) {
        return new Bids(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, Double, Byte> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
